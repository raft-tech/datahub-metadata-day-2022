plugins {
    id 'java'
}

apply plugin: 'pegasus'

configurations {
    avro
}

dependencies {
    avro project(path: ':metadata-models', configuration: 'avroSchema')

    compile project(':li-utils')
    compile (project(':metadata-service:factories')) {
        exclude group: 'org.neo4j.test'
    }
    compile project(':metadata-service:auth-api')
    compile project(':metadata-service:restli-client')
    compile project(':metadata-io')
    compile project(':ingestion-scheduler')
    compile project(':metadata-utils')
    compile project(":entity-registry")
    compile project(':metadata-events:mxe-avro-1.7')
    compile project(':metadata-events:mxe-registration')
    compile project(':metadata-events:mxe-utils-avro-1.7')


    compile externalDependency.elasticSearchRest
    compile externalDependency.kafkaAvroSerde
    compile externalDependency.neo4jJavaDriver

    compile externalDependency.springKafka
    compile externalDependency.springActuator

    compileOnly externalDependency.lombok

    annotationProcessor externalDependency.lombok

    runtime externalDependency.logbackClassic

    testCompile externalDependency.mockito
    implementation externalDependency.awsMskIamAuth
}

task avroSchemaSources(type: Copy) {
    dependsOn configurations.avro

    from { // use of closure defers evaluation until execution time
        configurations.avro.collect { zipTree(it) }
    }
    into("src/main/resources/")
    include("avro/com/linkedin/mxe/")
}

compileJava.dependsOn avroSchemaSources

clean {
    project.delete("src/main/resources/avro")
}