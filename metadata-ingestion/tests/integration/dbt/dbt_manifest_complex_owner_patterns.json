{
  "child_map": {
    "model.sample_dbt.customer_details": [
      "model.sample_dbt.monthly_billing_with_cust"
    ],
    "model.sample_dbt.monthly_billing_with_cust": [],
    "model.sample_dbt.payments_base": [
      "model.sample_dbt.payments_by_customer_by_month"
    ],
    "model.sample_dbt.payments_by_customer_by_month": [
      "model.sample_dbt.monthly_billing_with_cust"
    ],
    "source.sample_dbt.pagila.actor": [],
    "source.sample_dbt.pagila.address": [
      "model.sample_dbt.customer_details"
    ],
    "source.sample_dbt.pagila.category": [],
    "source.sample_dbt.pagila.city": [
      "model.sample_dbt.customer_details"
    ],
    "source.sample_dbt.pagila.country": [],
    "source.sample_dbt.pagila.customer": [
      "model.sample_dbt.customer_details"
    ],
    "source.sample_dbt.pagila.payment_p2020_01": [
      "model.sample_dbt.payments_base"
    ],
    "source.sample_dbt.pagila.payment_p2020_02": [
      "model.sample_dbt.payments_base",
      "model.sample_dbt.payments_base"
    ],
    "source.sample_dbt.pagila.payment_p2020_03": [
      "model.sample_dbt.payments_base"
    ],
    "source.sample_dbt.pagila.payment_p2020_04": [
      "model.sample_dbt.payments_base"
    ],
    "source.sample_dbt.pagila.payment_p2020_05": [
      "model.sample_dbt.payments_base"
    ],
    "source.sample_dbt.pagila.payment_p2020_06": [
      "model.sample_dbt.payments_base"
    ]
  },
  "disabled": [],
  "docs": {
    "dbt.__overview__": {
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support.",
      "name": "__overview__",
      "original_file_path": "docs/overview.md",
      "package_name": "dbt",
      "path": "overview.md",
      "root_path": "/some-path/sample-dbt",
      "unique_id": "dbt.__overview__"
    }
  },
  "exposures": {},
  "macros": {
    "macro.dbt.after_commit": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "meta": {},
      "name": "after_commit",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.after_commit"
    },
    "macro.dbt.alter_column_comment": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}",
      "meta": {},
      "name": "alter_column_comment",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.alter_column_comment"
    },
    "macro.dbt.alter_column_type": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "meta": {},
      "name": "alter_column_type",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.alter_column_type"
    },
    "macro.dbt.alter_relation_comment": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}",
      "meta": {},
      "name": "alter_relation_comment",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.alter_relation_comment"
    },
    "macro.dbt.basic_load_csv_rows": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
      "meta": {},
      "name": "basic_load_csv_rows",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.basic_load_csv_rows"
    },
    "macro.dbt.before_begin": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "meta": {},
      "name": "before_begin",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.before_begin"
    },
    "macro.dbt.build_snapshot_staging_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "meta": {},
      "name": "build_snapshot_staging_table",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.build_snapshot_staging_table"
    },
    "macro.dbt.build_snapshot_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "meta": {},
      "name": "build_snapshot_table",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.build_snapshot_table"
    },
    "macro.dbt.check_schema_exists": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}",
      "meta": {},
      "name": "check_schema_exists",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.check_schema_exists"
    },
    "macro.dbt.collect_freshness": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "meta": {},
      "name": "collect_freshness",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.collect_freshness"
    },
    "macro.dbt.column_list": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}",
      "meta": {},
      "name": "column_list",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.column_list"
    },
    "macro.dbt.column_list_for_create_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}",
      "meta": {},
      "name": "column_list_for_create_table",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.column_list_for_create_table"
    },
    "macro.dbt.common_get_delete_insert_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}",
      "meta": {},
      "name": "common_get_delete_insert_merge_sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.common_get_delete_insert_merge_sql"
    },
    "macro.dbt.convert_datetime": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "meta": {},
      "name": "convert_datetime",
      "original_file_path": "macros/etc/datetime.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/datetime.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.convert_datetime"
    },
    "macro.dbt.create_columns": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}",
      "meta": {},
      "name": "create_columns",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.create_columns"
    },
    "macro.dbt.create_csv_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}",
      "meta": {},
      "name": "create_csv_table",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.create_csv_table"
    },
    "macro.dbt.create_or_replace_view": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "meta": {},
      "name": "create_or_replace_view",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.create_or_replace_view"
    },
    "macro.dbt.create_schema": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}",
      "meta": {},
      "name": "create_schema",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.create_schema"
    },
    "macro.dbt.create_table_as": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}",
      "meta": {},
      "name": "create_table_as",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.create_table_as"
    },
    "macro.dbt.create_view_as": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}",
      "meta": {},
      "name": "create_view_as",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.create_view_as"
    },
    "macro.dbt.current_timestamp": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}",
      "meta": {},
      "name": "current_timestamp",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.current_timestamp"
    },
    "macro.dbt.dates_in_range": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "meta": {},
      "name": "dates_in_range",
      "original_file_path": "macros/etc/datetime.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/datetime.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.dates_in_range"
    },
    "macro.dbt.default__alter_column_comment": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__alter_column_comment",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__alter_column_comment"
    },
    "macro.dbt.default__alter_column_type": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "meta": {},
      "name": "default__alter_column_type",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__alter_column_type"
    },
    "macro.dbt.default__alter_relation_comment": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__alter_relation_comment",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__alter_relation_comment"
    },
    "macro.dbt.default__check_schema_exists": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__check_schema_exists",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__check_schema_exists"
    },
    "macro.dbt.default__collect_freshness": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__collect_freshness",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__collect_freshness"
    },
    "macro.dbt.default__create_columns": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "meta": {},
      "name": "default__create_columns",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__create_columns"
    },
    "macro.dbt.default__create_csv_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__create_csv_table",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__create_csv_table"
    },
    "macro.dbt.default__create_schema": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "meta": {},
      "name": "default__create_schema",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__create_schema"
    },
    "macro.dbt.default__create_table_as": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}",
      "meta": {},
      "name": "default__create_table_as",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__create_table_as"
    },
    "macro.dbt.default__create_view_as": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "meta": {},
      "name": "default__create_view_as",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__create_view_as"
    },
    "macro.dbt.default__current_timestamp": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}",
      "meta": {},
      "name": "default__current_timestamp",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__current_timestamp"
    },
    "macro.dbt.default__drop_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "meta": {},
      "name": "default__drop_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__drop_relation"
    },
    "macro.dbt.default__drop_schema": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "meta": {},
      "name": "default__drop_schema",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__drop_schema"
    },
    "macro.dbt.default__generate_database_name": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "meta": {},
      "name": "default__generate_database_name",
      "original_file_path": "macros/etc/get_custom_database.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/get_custom_database.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__generate_database_name"
    },
    "macro.dbt.default__get_catalog": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__get_catalog",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__get_catalog"
    },
    "macro.dbt.default__get_columns_in_query": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__get_columns_in_query",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__get_columns_in_query"
    },
    "macro.dbt.default__get_columns_in_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__get_columns_in_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__get_columns_in_relation"
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__get_delete_insert_merge_sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql"
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "meta": {},
      "name": "default__get_insert_overwrite_merge_sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql"
    },
    "macro.dbt.default__get_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "meta": {},
      "name": "default__get_merge_sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__get_merge_sql"
    },
    "macro.dbt.default__handle_existing_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__handle_existing_table",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__handle_existing_table"
    },
    "macro.dbt.default__information_schema_name": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "meta": {},
      "name": "default__information_schema_name",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__information_schema_name"
    },
    "macro.dbt.default__list_relations_without_caching": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__list_relations_without_caching",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__list_relations_without_caching"
    },
    "macro.dbt.default__list_schemas": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__list_schemas",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__list_schemas"
    },
    "macro.dbt.default__load_csv_rows": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}",
      "meta": {},
      "name": "default__load_csv_rows",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__load_csv_rows"
    },
    "macro.dbt.default__make_temp_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
      "meta": {},
      "name": "default__make_temp_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__make_temp_relation"
    },
    "macro.dbt.default__persist_docs": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "meta": {},
      "name": "default__persist_docs",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__persist_docs"
    },
    "macro.dbt.default__post_snapshot": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "meta": {},
      "name": "default__post_snapshot",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__post_snapshot"
    },
    "macro.dbt.default__rename_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "meta": {},
      "name": "default__rename_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__rename_relation"
    },
    "macro.dbt.default__reset_csv_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "meta": {},
      "name": "default__reset_csv_table",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__reset_csv_table"
    },
    "macro.dbt.default__snapshot_get_time": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}",
      "meta": {},
      "name": "default__snapshot_get_time",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__snapshot_get_time"
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "meta": {},
      "name": "default__snapshot_hash_arguments",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__snapshot_hash_arguments"
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}",
      "meta": {},
      "name": "default__snapshot_merge_sql",
      "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot_merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__snapshot_merge_sql"
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "meta": {},
      "name": "default__snapshot_string_as_time",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__snapshot_string_as_time"
    },
    "macro.dbt.default__test_accepted_values": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}",
      "meta": {},
      "name": "default__test_accepted_values",
      "original_file_path": "macros/schema_tests/accepted_values.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/accepted_values.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__test_accepted_values"
    },
    "macro.dbt.default__test_not_null": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "meta": {},
      "name": "default__test_not_null",
      "original_file_path": "macros/schema_tests/not_null.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/not_null.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__test_not_null"
    },
    "macro.dbt.default__test_relationships": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}",
      "meta": {},
      "name": "default__test_relationships",
      "original_file_path": "macros/schema_tests/relationships.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/relationships.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__test_relationships"
    },
    "macro.dbt.default__test_unique": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}",
      "meta": {},
      "name": "default__test_unique",
      "original_file_path": "macros/schema_tests/unique.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/unique.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__test_unique"
    },
    "macro.dbt.default__truncate_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "meta": {},
      "name": "default__truncate_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.default__truncate_relation"
    },
    "macro.dbt.drop_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}",
      "meta": {},
      "name": "drop_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.drop_relation"
    },
    "macro.dbt.drop_relation_if_exists": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "meta": {},
      "name": "drop_relation_if_exists",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.drop_relation_if_exists"
    },
    "macro.dbt.drop_schema": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}",
      "meta": {},
      "name": "drop_schema",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.drop_schema"
    },
    "macro.dbt.generate_alias_name": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "meta": {},
      "name": "generate_alias_name",
      "original_file_path": "macros/etc/get_custom_alias.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/get_custom_alias.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.generate_alias_name"
    },
    "macro.dbt.generate_database_name": {
      "arguments": [],
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_database_name"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}",
      "meta": {},
      "name": "generate_database_name",
      "original_file_path": "macros/etc/get_custom_database.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/get_custom_database.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.generate_database_name"
    },
    "macro.dbt.generate_schema_name": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "meta": {},
      "name": "generate_schema_name",
      "original_file_path": "macros/etc/get_custom_schema.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/get_custom_schema.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.generate_schema_name"
    },
    "macro.dbt.generate_schema_name_for_env": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "meta": {},
      "name": "generate_schema_name_for_env",
      "original_file_path": "macros/etc/get_custom_schema.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/get_custom_schema.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.generate_schema_name_for_env"
    },
    "macro.dbt.get_catalog": {
      "arguments": [],
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__get_catalog"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}",
      "meta": {},
      "name": "get_catalog",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_catalog"
    },
    "macro.dbt.get_columns_in_query": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}",
      "meta": {},
      "name": "get_columns_in_query",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_columns_in_query"
    },
    "macro.dbt.get_columns_in_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}",
      "meta": {},
      "name": "get_columns_in_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_columns_in_relation"
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
      "meta": {},
      "name": "get_delete_insert_merge_sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_delete_insert_merge_sql"
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "meta": {},
      "name": "get_insert_overwrite_merge_sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql"
    },
    "macro.dbt.get_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
      "meta": {},
      "name": "get_merge_sql",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_merge_sql"
    },
    "macro.dbt.get_or_create_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "meta": {},
      "name": "get_or_create_relation",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_or_create_relation"
    },
    "macro.dbt.get_quoted_csv": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "meta": {},
      "name": "get_quoted_csv",
      "original_file_path": "macros/materializations/common/merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/common/merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_quoted_csv"
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "meta": {},
      "name": "get_seed_column_quoted_csv",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.get_seed_column_quoted_csv"
    },
    "macro.dbt.handle_existing_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}",
      "meta": {},
      "name": "handle_existing_table",
      "original_file_path": "macros/materializations/view/create_or_replace_view.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/view/create_or_replace_view.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.handle_existing_table"
    },
    "macro.dbt.in_transaction": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "meta": {},
      "name": "in_transaction",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.in_transaction"
    },
    "macro.dbt.incremental_upsert": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}",
      "meta": {},
      "name": "incremental_upsert",
      "original_file_path": "macros/materializations/incremental/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/incremental/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.incremental_upsert"
    },
    "macro.dbt.information_schema_name": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}",
      "meta": {},
      "name": "information_schema_name",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.information_schema_name"
    },
    "macro.dbt.is_incremental": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "meta": {},
      "name": "is_incremental",
      "original_file_path": "macros/etc/is_incremental.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/is_incremental.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.is_incremental"
    },
    "macro.dbt.list_relations_without_caching": {
      "arguments": [],
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__list_relations_without_caching"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}",
      "meta": {},
      "name": "list_relations_without_caching",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.list_relations_without_caching"
    },
    "macro.dbt.list_schemas": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}",
      "meta": {},
      "name": "list_schemas",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.list_schemas"
    },
    "macro.dbt.load_csv_rows": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}",
      "meta": {},
      "name": "load_csv_rows",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.load_csv_rows"
    },
    "macro.dbt.load_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "meta": {},
      "name": "load_relation",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.load_relation"
    },
    "macro.dbt.make_hook_config": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "meta": {},
      "name": "make_hook_config",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.make_hook_config"
    },
    "macro.dbt.make_temp_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}",
      "meta": {},
      "name": "make_temp_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.make_temp_relation"
    },
    "macro.dbt.materialization_incremental_default": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "meta": {},
      "name": "materialization_incremental_default",
      "original_file_path": "macros/materializations/incremental/incremental.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/incremental/incremental.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.materialization_incremental_default"
    },
    "macro.dbt.materialization_seed_default": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "meta": {},
      "name": "materialization_seed_default",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.materialization_seed_default"
    },
    "macro.dbt.materialization_snapshot_default": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "meta": {},
      "name": "materialization_snapshot_default",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.materialization_snapshot_default"
    },
    "macro.dbt.materialization_table_default": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "meta": {},
      "name": "materialization_table_default",
      "original_file_path": "macros/materializations/table/table.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/table/table.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.materialization_table_default"
    },
    "macro.dbt.materialization_view_default": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "meta": {},
      "name": "materialization_view_default",
      "original_file_path": "macros/materializations/view/view.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/view/view.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.materialization_view_default"
    },
    "macro.dbt.noop_statement": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "meta": {},
      "name": "noop_statement",
      "original_file_path": "macros/core.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/core.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.noop_statement"
    },
    "macro.dbt.partition_range": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "meta": {},
      "name": "partition_range",
      "original_file_path": "macros/etc/datetime.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/datetime.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.partition_range"
    },
    "macro.dbt.persist_docs": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "meta": {},
      "name": "persist_docs",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.persist_docs"
    },
    "macro.dbt.post_snapshot": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}",
      "meta": {},
      "name": "post_snapshot",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.post_snapshot"
    },
    "macro.dbt.py_current_timestring": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "meta": {},
      "name": "py_current_timestring",
      "original_file_path": "macros/etc/datetime.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/datetime.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.py_current_timestring"
    },
    "macro.dbt.rename_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}",
      "meta": {},
      "name": "rename_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.rename_relation"
    },
    "macro.dbt.reset_csv_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "meta": {},
      "name": "reset_csv_table",
      "original_file_path": "macros/materializations/seed/seed.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/seed/seed.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.reset_csv_table"
    },
    "macro.dbt.run_hooks": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "meta": {},
      "name": "run_hooks",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.run_hooks"
    },
    "macro.dbt.run_query": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "meta": {},
      "name": "run_query",
      "original_file_path": "macros/etc/query.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/etc/query.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.run_query"
    },
    "macro.dbt.set_sql_header": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "meta": {},
      "name": "set_sql_header",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.set_sql_header"
    },
    "macro.dbt.should_full_refresh": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "meta": {},
      "name": "should_full_refresh",
      "original_file_path": "macros/materializations/helpers.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/helpers.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.should_full_refresh"
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}",
      "meta": {},
      "name": "snapshot_check_all_get_existing_columns",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns"
    },
    "macro.dbt.snapshot_check_strategy": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "meta": {},
      "name": "snapshot_check_strategy",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_check_strategy"
    },
    "macro.dbt.snapshot_get_time": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}",
      "meta": {},
      "name": "snapshot_get_time",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_get_time"
    },
    "macro.dbt.snapshot_hash_arguments": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}",
      "meta": {},
      "name": "snapshot_hash_arguments",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_hash_arguments"
    },
    "macro.dbt.snapshot_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}",
      "meta": {},
      "name": "snapshot_merge_sql",
      "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot_merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_merge_sql"
    },
    "macro.dbt.snapshot_staging_table": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "meta": {},
      "name": "snapshot_staging_table",
      "original_file_path": "macros/materializations/snapshot/snapshot.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/snapshot.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_staging_table"
    },
    "macro.dbt.snapshot_string_as_time": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}",
      "meta": {},
      "name": "snapshot_string_as_time",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_string_as_time"
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "meta": {},
      "name": "snapshot_timestamp_strategy",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.snapshot_timestamp_strategy"
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "meta": {},
      "name": "sql_convert_columns_in_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.sql_convert_columns_in_relation"
    },
    "macro.dbt.statement": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "meta": {},
      "name": "statement",
      "original_file_path": "macros/core.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/core.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.statement"
    },
    "macro.dbt.strategy_dispatch": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "meta": {},
      "name": "strategy_dispatch",
      "original_file_path": "macros/materializations/snapshot/strategies.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/materializations/snapshot/strategies.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.strategy_dispatch"
    },
    "macro.dbt.test_accepted_values": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}",
      "meta": {},
      "name": "test_accepted_values",
      "original_file_path": "macros/schema_tests/accepted_values.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/accepted_values.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.test_accepted_values"
    },
    "macro.dbt.test_not_null": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}",
      "meta": {},
      "name": "test_not_null",
      "original_file_path": "macros/schema_tests/not_null.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/not_null.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.test_not_null"
    },
    "macro.dbt.test_relationships": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}",
      "meta": {},
      "name": "test_relationships",
      "original_file_path": "macros/schema_tests/relationships.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/relationships.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.test_relationships"
    },
    "macro.dbt.test_unique": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}",
      "meta": {},
      "name": "test_unique",
      "original_file_path": "macros/schema_tests/unique.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/schema_tests/unique.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.test_unique"
    },
    "macro.dbt.truncate_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}",
      "meta": {},
      "name": "truncate_relation",
      "original_file_path": "macros/adapters/common.sql",
      "package_name": "dbt",
      "patch_path": null,
      "path": "macros/adapters/common.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt.truncate_relation"
    },
    "macro.dbt_postgres.postgres__alter_column_comment": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__alter_column_comment",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__alter_column_comment"
    },
    "macro.dbt_postgres.postgres__alter_relation_comment": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
      "meta": {},
      "name": "postgres__alter_relation_comment",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment"
    },
    "macro.dbt_postgres.postgres__check_schema_exists": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__check_schema_exists",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__check_schema_exists"
    },
    "macro.dbt_postgres.postgres__create_schema": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__create_schema",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__create_schema"
    },
    "macro.dbt_postgres.postgres__create_table_as": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "meta": {},
      "name": "postgres__create_table_as",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__create_table_as"
    },
    "macro.dbt_postgres.postgres__current_timestamp": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}",
      "meta": {},
      "name": "postgres__current_timestamp",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__current_timestamp"
    },
    "macro.dbt_postgres.postgres__drop_schema": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__drop_schema",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__drop_schema"
    },
    "macro.dbt_postgres.postgres__get_catalog": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}",
      "meta": {},
      "name": "postgres__get_catalog",
      "original_file_path": "macros/catalog.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/catalog.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__get_catalog"
    },
    "macro.dbt_postgres.postgres__get_columns_in_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__get_columns_in_relation",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation"
    },
    "macro.dbt_postgres.postgres__information_schema_name": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}",
      "meta": {},
      "name": "postgres__information_schema_name",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__information_schema_name"
    },
    "macro.dbt_postgres.postgres__list_relations_without_caching": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__list_relations_without_caching",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching"
    },
    "macro.dbt_postgres.postgres__list_schemas": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__list_schemas",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__list_schemas"
    },
    "macro.dbt_postgres.postgres__make_temp_relation": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}",
      "meta": {},
      "name": "postgres__make_temp_relation",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__make_temp_relation"
    },
    "macro.dbt_postgres.postgres__snapshot_get_time": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}",
      "meta": {},
      "name": "postgres__snapshot_get_time",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time"
    },
    "macro.dbt_postgres.postgres__snapshot_merge_sql": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}",
      "meta": {},
      "name": "postgres__snapshot_merge_sql",
      "original_file_path": "macros/materializations/snapshot_merge.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/materializations/snapshot_merge.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql"
    },
    "macro.dbt_postgres.postgres__snapshot_string_as_time": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
      "meta": {},
      "name": "postgres__snapshot_string_as_time",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time"
    },
    "macro.dbt_postgres.postgres_escape_comment": {
      "arguments": [],
      "depends_on": {
        "macros": []
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
      "meta": {},
      "name": "postgres_escape_comment",
      "original_file_path": "macros/adapters.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/adapters.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres_escape_comment"
    },
    "macro.dbt_postgres.postgres_get_relations": {
      "arguments": [],
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}",
      "meta": {},
      "name": "postgres_get_relations",
      "original_file_path": "macros/relations.sql",
      "package_name": "dbt_postgres",
      "patch_path": null,
      "path": "macros/relations.sql",
      "resource_type": "macro",
      "root_path": "/some-path/sample-dbt",
      "tags": [],
      "unique_id": "macro.dbt_postgres.postgres_get_relations"
    }
  },
  "metadata": {
    "adapter_type": "postgres",
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json",
    "dbt_version": "0.19.1",
    "env": {},
    "generated_at": "2021-06-18T21:38:36.384613Z",
    "invocation_id": "just-some-random-id",
    "project_id": "d7ed27e3f02ff95ca753dd76aed208ee",
    "send_anonymous_usage_stats": true,
    "user_id": "42f923a6-43bf-43ad-a6e2-6f51517dcc94"
  },
  "nodes": {
    "model.sample_dbt.customer_details": {
      "alias": "customer_details",
      "build_path": "target/compiled/sample_dbt/models/transform/customer_details.sql",
      "checksum": {
        "checksum": "038ac5af10d168699b8e5dcef54752c22a31a705eed010cacbf180e9ca214ceb",
        "name": "sha256"
      },
      "meta": {
        "business_owner": "jdoe.last@gmail.com",
        "data_governance.team_owner": "Finance",
        "has_pii": true,
        "int_property": 1,
        "double_property": 2.5
      },
      "columns": {},
      "compiled": true,
      "compiled_sql": "\n\nSELECT\n    c.customer_id,\n    c.first_name || ' ' || c.last_name as \"full_name\",\n    c.email,\n    a.address,\n    m.city,\n    a.postal_code,\n    a.phone\nFROM\n    \"pagila\".\"public\".\"customer\" c\n    left outer join \"pagila\".\"public\".\"address\" a on c.address_id = a.address_id\n    left outer join \"pagila\".\"public\".\"city\" m on a.city_id = m.city_id",
      "config": {
        "alias": null,
        "column_types": {},
        "database": null,
        "enabled": true,
        "full_refresh": null,
        "materialized": "ephemeral",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "schema": null,
        "tags": [],
        "vars": {},
        "meta": {
          "owner": "alice2"
        }
      },
      "database": "pagila",
      "deferred": false,
      "depends_on": {
        "macros": [],
        "nodes": [
          "source.sample_dbt.pagila.customer",
          "source.sample_dbt.pagila.address",
          "source.sample_dbt.pagila.city"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "extra_ctes": [],
      "extra_ctes_injected": true,
      "fqn": [
        "sample_dbt",
        "transform",
        "customer_details"
      ],
      "name": "customer_details",
      "original_file_path": "models/transform/customer_details.sql",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "transform/customer_details.sql",
      "raw_sql": "{{ config(\n    materialized = \"ephemeral\",\n) }}\n\nSELECT\n    c.customer_id,\n    c.first_name || ' ' || c.last_name as \"full_name\",\n    c.email,\n    a.address,\n    m.city,\n    a.postal_code,\n    a.phone\nFROM\n    {{ source('pagila', 'customer')}} c\n    left outer join {{ source('pagila', 'address')}} a on c.address_id = a.address_id\n    left outer join {{ source('pagila', 'city') }} m on a.city_id = m.city_id",
      "refs": [],
      "relation_name": null,
      "resource_type": "model",
      "root_path": "/some-path/sample-dbt",
      "schema": "dbt_postgres",
      "sources": [
        [
          "pagila",
          "customer"
        ],
        [
          "pagila",
          "address"
        ],
        [
          "pagila",
          "city"
        ]
      ],
      "tags": [ "test_tag" ],
      "unique_id": "model.sample_dbt.customer_details",
      "unrendered_config": {
        "materialized": "ephemeral"
      }
    },
    "model.sample_dbt.monthly_billing_with_cust": {
      "alias": "an-aliased-view-for-monthly-billing",
      "build_path": "target/compiled/sample_dbt/models/billing/monthly_billing_with_cust.sql",
      "checksum": {
        "checksum": "3f13dfa22648e3bb3e52082de053591b33b07ca028216db3b12a1a09d6bf747a",
        "name": "sha256"
      },
      "meta": {
        "business_owner": "jdoe.last",
        "data_governance.team_owner": "Sales",
        "has_pii": false,
        "int_property": 2,
        "double_property": 3.5
      },
      "columns": {},
      "compiled": true,
      "compiled_sql": "\n\nwith __dbt__CTE__customer_details as (\n\n\nSELECT\n    c.customer_id,\n    c.first_name || ' ' || c.last_name as \"full_name\",\n    c.email,\n    a.address,\n    m.city,\n    a.postal_code,\n    a.phone\nFROM\n    \"pagila\".\"public\".\"customer\" c\n    left outer join \"pagila\".\"public\".\"address\" a on c.address_id = a.address_id\n    left outer join \"pagila\".\"public\".\"city\" m on a.city_id = m.city_id\n)SELECT \n    pbc.billing_month,\n    pbc.customer_id,\n    pbc.amount,\n    cust.email\nFROM\n    \"pagila\".\"dbt_postgres\".\"payments_by_customer_by_month\" pbc\n    left outer join __dbt__CTE__customer_details cust on pbc.customer_id = cust.customer_id\nORDER BY\n    pbc.billing_month",
      "config": {
        "alias": "an-aliased-view-for-monthly-billing",
        "column_types": {},
        "database": null,
        "enabled": true,
        "full_refresh": null,
        "materialized": "table",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "schema": null,
        "tags": [],
        "vars": {}
      },
      "database": "pagila",
      "deferred": false,
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.sample_dbt.payments_by_customer_by_month",
          "model.sample_dbt.customer_details"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "extra_ctes": [
        {
          "id": "model.sample_dbt.customer_details",
          "sql": " __dbt__CTE__customer_details as (\n\n\nSELECT\n    c.customer_id,\n    c.first_name || ' ' || c.last_name as \"full_name\",\n    c.email,\n    a.address,\n    m.city,\n    a.postal_code,\n    a.phone\nFROM\n    \"pagila\".\"public\".\"customer\" c\n    left outer join \"pagila\".\"public\".\"address\" a on c.address_id = a.address_id\n    left outer join \"pagila\".\"public\".\"city\" m on a.city_id = m.city_id\n)"
        }
      ],
      "extra_ctes_injected": true,
      "fqn": [
        "sample_dbt",
        "billing",
        "monthly_billing_with_cust"
      ],
      "name": "monthly_billing_with_cust",
      "original_file_path": "models/billing/monthly_billing_with_cust.sql",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "billing/monthly_billing_with_cust.sql",
      "raw_sql": "{{ config(\n    materialized = \"table\",\n    alias='an-aliased-view-for-monthly-billing'\n) }}\n\nSELECT \n    pbc.billing_month,\n    pbc.customer_id,\n    pbc.amount,\n    cust.email\nFROM\n    {{ ref('payments_by_customer_by_month')}} pbc\n    left outer join {{ ref('customer_details')}} cust on pbc.customer_id = cust.customer_id\nORDER BY\n    pbc.billing_month",
      "refs": [
        [
          "payments_by_customer_by_month"
        ],
        [
          "customer_details"
        ]
      ],
      "relation_name": "\"pagila\".\"dbt_postgres\".\"an-aliased-view-for-monthly-billing\"",
      "resource_type": "model",
      "root_path": "/some-path/sample-dbt",
      "schema": "dbt_postgres",
      "sources": [],
      "tags": [],
      "unique_id": "model.sample_dbt.monthly_billing_with_cust",
      "unrendered_config": {
        "alias": "an-aliased-view-for-monthly-billing",
        "materialized": "table"
      }
    },
    "model.sample_dbt.payments_base": {
      "alias": "an-aliased-view-for-payments",
      "build_path": "target/compiled/sample_dbt/models/base/payments_base.sql",
      "checksum": {
        "checksum": "11032ac45a744ecfe350f4ba5d7cbdd8b47bc83f0b39474dd0e7839888768dd3",
        "name": "sha256"
      },
      "columns": {},
      "compiled": true,
      "compiled_sql": "\n\nwith payments as (\n\n    select \n        *\n    from \n        \"pagila\".\"public\".\"payment_p2020_01\"\n    UNION ALL\n    select \n        *\n    from \n        \"pagila\".\"public\".\"payment_p2020_02\"\n    UNION ALL\n    select \n        *\n    from \n        \"pagila\".\"public\".\"payment_p2020_02\"\n    UNION ALL\n    select \n        *\n    from \n        \"pagila\".\"public\".\"payment_p2020_03\"\n    UNION ALL\n    select \n        *\n    from \n        \"pagila\".\"public\".\"payment_p2020_04\"\n    UNION ALL\n    select \n        *\n    from \n        \"pagila\".\"public\".\"payment_p2020_05\"\n    UNION ALL\n    select \n        *\n    from \n        \"pagila\".\"public\".\"payment_p2020_06\"\n)\n\nselect *\nfrom payments",
      "config": {
        "alias": "an-aliased-view-for-payments",
        "column_types": {},
        "database": null,
        "enabled": true,
        "full_refresh": null,
        "materialized": "view",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "schema": null,
        "tags": [],
        "vars": {}
      },
      "database": "pagila",
      "deferred": false,
      "depends_on": {
        "macros": [],
        "nodes": [
          "source.sample_dbt.pagila.payment_p2020_01",
          "source.sample_dbt.pagila.payment_p2020_02",
          "source.sample_dbt.pagila.payment_p2020_02",
          "source.sample_dbt.pagila.payment_p2020_03",
          "source.sample_dbt.pagila.payment_p2020_04",
          "source.sample_dbt.pagila.payment_p2020_05",
          "source.sample_dbt.pagila.payment_p2020_06"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "extra_ctes": [],
      "extra_ctes_injected": true,
      "fqn": [
        "sample_dbt",
        "base",
        "payments_base"
      ],
      "meta": {},
      "name": "payments_base",
      "original_file_path": "models/base/payments_base.sql",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "base/payments_base.sql",
      "raw_sql": "{{ config(\n    materialized=\"view\",\n    alias='an-aliased-view-for-payments'\n) }}\n\nwith payments as (\n\n    select \n        *\n    from \n        {{ source('pagila', 'payment_p2020_01')}}\n    UNION ALL\n    select \n        *\n    from \n        {{ source('pagila', 'payment_p2020_02')}}\n    UNION ALL\n    select \n        *\n    from \n        {{ source('pagila', 'payment_p2020_02')}}\n    UNION ALL\n    select \n        *\n    from \n        {{ source('pagila', 'payment_p2020_03')}}\n    UNION ALL\n    select \n        *\n    from \n        {{ source('pagila', 'payment_p2020_04')}}\n    UNION ALL\n    select \n        *\n    from \n        {{ source('pagila', 'payment_p2020_05')}}\n    UNION ALL\n    select \n        *\n    from \n        {{ source('pagila', 'payment_p2020_06')}}\n)\n\nselect *\nfrom payments",
      "refs": [],
      "relation_name": "\"pagila\".\"dbt_postgres\".\"an-aliased-view-for-payments\"",
      "resource_type": "model",
      "root_path": "/some-path/sample-dbt",
      "schema": "dbt_postgres",
      "sources": [
        [
          "pagila",
          "payment_p2020_01"
        ],
        [
          "pagila",
          "payment_p2020_02"
        ],
        [
          "pagila",
          "payment_p2020_02"
        ],
        [
          "pagila",
          "payment_p2020_03"
        ],
        [
          "pagila",
          "payment_p2020_04"
        ],
        [
          "pagila",
          "payment_p2020_05"
        ],
        [
          "pagila",
          "payment_p2020_06"
        ]
      ],
      "tags": [],
      "unique_id": "model.sample_dbt.payments_base",
      "unrendered_config": {
        "alias": "an-aliased-view-for-payments",
        "materialized": "view"
      }
    },
    "model.sample_dbt.payments_by_customer_by_month": {
      "alias": "payments_by_customer_by_month",
      "build_path": "target/compiled/sample_dbt/models/transform/payments_by_customer_by_month.sql",
      "checksum": {
        "checksum": "691757217fdc0ad849160f0b24bff8fa09385b51f9f5605dda388a6d47d1ab28",
        "name": "sha256"
      },
      "columns": {},
      "compiled": true,
      "compiled_sql": "\n\nSELECT\n    date_trunc('month', payment_date) as \"billing_month\",\n    customer_id,\n    sum(amount) as \"amount\"\nFROM\n    \"pagila\".\"dbt_postgres\".\"an-aliased-view-for-payments\"\nGROUP BY\n    billing_month,\n    customer_id",
      "config": {
        "alias": null,
        "column_types": {},
        "database": null,
        "enabled": true,
        "full_refresh": null,
        "materialized": "table",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "schema": null,
        "tags": [],
        "vars": {}
      },
      "database": "pagila",
      "deferred": false,
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.sample_dbt.payments_base"
        ]
      },
      "description": "",
      "docs": {
        "show": true
      },
      "extra_ctes": [],
      "extra_ctes_injected": true,
      "fqn": [
        "sample_dbt",
        "transform",
        "payments_by_customer_by_month"
      ],
      "meta": {},
      "name": "payments_by_customer_by_month",
      "original_file_path": "models/transform/payments_by_customer_by_month.sql",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "transform/payments_by_customer_by_month.sql",
      "raw_sql": "{{ config(\n    materialized = \"table\",\n) }}\n\nSELECT\n    date_trunc('month', payment_date) as \"billing_month\",\n    customer_id,\n    sum(amount) as \"amount\"\nFROM\n    {{ ref('payments_base')}}\nGROUP BY\n    billing_month,\n    customer_id",
      "refs": [
        [
          "payments_base"
        ]
      ],
      "relation_name": "\"pagila\".\"dbt_postgres\".\"payments_by_customer_by_month\"",
      "resource_type": "model",
      "root_path": "/some-path/sample-dbt",
      "schema": "dbt_postgres",
      "sources": [],
      "tags": [],
      "unique_id": "model.sample_dbt.payments_by_customer_by_month",
      "unrendered_config": {
        "materialized": "table"
      }
    }
  },
  "parent_map": {
    "model.sample_dbt.customer_details": [
      "source.sample_dbt.pagila.address",
      "source.sample_dbt.pagila.city",
      "source.sample_dbt.pagila.customer"
    ],
    "model.sample_dbt.monthly_billing_with_cust": [
      "model.sample_dbt.customer_details",
      "model.sample_dbt.payments_by_customer_by_month"
    ],
    "model.sample_dbt.payments_base": [
      "source.sample_dbt.pagila.payment_p2020_01",
      "source.sample_dbt.pagila.payment_p2020_02",
      "source.sample_dbt.pagila.payment_p2020_02",
      "source.sample_dbt.pagila.payment_p2020_03",
      "source.sample_dbt.pagila.payment_p2020_04",
      "source.sample_dbt.pagila.payment_p2020_05",
      "source.sample_dbt.pagila.payment_p2020_06"
    ],
    "model.sample_dbt.payments_by_customer_by_month": [
      "model.sample_dbt.payments_base"
    ],
    "source.sample_dbt.pagila.actor": [],
    "source.sample_dbt.pagila.address": [],
    "source.sample_dbt.pagila.category": [],
    "source.sample_dbt.pagila.city": [],
    "source.sample_dbt.pagila.country": [],
    "source.sample_dbt.pagila.customer": [],
    "source.sample_dbt.pagila.payment_p2020_01": [],
    "source.sample_dbt.pagila.payment_p2020_02": [],
    "source.sample_dbt.pagila.payment_p2020_03": [],
    "source.sample_dbt.pagila.payment_p2020_04": [],
    "source.sample_dbt.pagila.payment_p2020_05": [],
    "source.sample_dbt.pagila.payment_p2020_06": []
  },
  "selectors": {},
  "sources": {
    "source.sample_dbt.pagila.actor": {
      "columns": {
        "first_name": {
          "data_type": null,
          "description": "description for first_name from dbt",
          "meta": {},
          "name": "first_name",
          "quote": null,
          "tags": ["column_tag"]
        },
        "last_name": {
          "data_type": null,
          "description": "description for last_name from dbt",
          "meta": {},
          "name": "last_name",
          "quote": null,
          "tags": []
        },
        "last_update": {
          "data_type": null,
          "description": "description for last_update from dbt",
          "meta": {},
          "name": "last_update",
          "quote": null,
          "tags": []
        }
      },
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "description for actor table from dbt",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "actor"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "actor",
      "loaded_at_field": "last_update",
      "loader": "",
      "meta": {
        "model_maturity": "in dev",
        "some_other_property": "test 1",
        "owner": "ML User(alice1@gmail.com)"
      },
      "name": "actor",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"actor\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.actor",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.address": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "a user's address",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "address"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "address",
      "loaded_at_field": "last_update",
      "loader": "",
      "meta": {},
      "name": "address",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"address\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.address",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.category": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "a user's category",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "category"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "category",
      "loaded_at_field": "last_update",
      "loader": "",
      "meta": {},
      "name": "category",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"category\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.category",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.city": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "city"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "city",
      "loaded_at_field": "last_update",
      "loader": "",
      "meta": {},
      "name": "city",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"city\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.city",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.country": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "country"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "country",
      "loaded_at_field": "last_update",
      "loader": "",
      "meta": {
        "model_maturity": "in prod",
        "owner": "bob@gmail.com",
        "some_other_property": "test 2"
      },
      "name": "country",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"country\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.country",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.customer": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "description for customer table from dbt",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "customer"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "customer",
      "loaded_at_field": "last_update",
      "loader": "",
      "meta": {},
      "name": "customer",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"customer\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.customer",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.payment_p2020_01": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "payment_p2020_01"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "payment_p2020_01",
      "loaded_at_field": "payment_date",
      "loader": "",
      "meta": {},
      "name": "payment_p2020_01",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"payment_p2020_01\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.payment_p2020_01",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.payment_p2020_02": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "payment_p2020_02"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "payment_p2020_02",
      "loaded_at_field": "payment_date",
      "loader": "",
      "meta": {
        "an_array_property": [
          "alpha",
          "beta",
          "charlie"
        ],
        "model_maturity": "in prod",
        "owner": "Analytics User(charles@gmail.com)",
        "some_other_property": "test 3"
      },
      "name": "payment_p2020_02",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"payment_p2020_02\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.payment_p2020_02",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.payment_p2020_03": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "payment_p2020_03"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "payment_p2020_03",
      "loaded_at_field": "payment_date",
      "loader": "",
      "meta": {},
      "name": "payment_p2020_03",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"payment_p2020_03\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.payment_p2020_03",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.payment_p2020_04": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "payment_p2020_04"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "payment_p2020_04",
      "loaded_at_field": "payment_date",
      "loader": "",
      "meta": {},
      "name": "payment_p2020_04",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"payment_p2020_04\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.payment_p2020_04",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.payment_p2020_05": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "a payment",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "payment_p2020_05"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "payment_p2020_05",
      "loaded_at_field": "payment_date",
      "loader": "",
      "meta": {},
      "name": "payment_p2020_05",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"payment_p2020_05\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.payment_p2020_05",
      "unrendered_config": {}
    },
    "source.sample_dbt.pagila.payment_p2020_06": {
      "columns": {},
      "config": {
        "enabled": true
      },
      "database": "pagila",
      "description": "",
      "external": null,
      "fqn": [
        "sample_dbt",
        "pagila",
        "payment_p2020_06"
      ],
      "freshness": {
        "error_after": {
          "count": 999999999,
          "period": "day"
        },
        "filter": null,
        "warn_after": {
          "count": 123456789,
          "period": "day"
        }
      },
      "identifier": "payment_p2020_06",
      "loaded_at_field": "payment_date",
      "loader": "",
      "meta": {},
      "name": "payment_p2020_06",
      "original_file_path": "models/base.yml",
      "package_name": "sample_dbt",
      "patch_path": null,
      "path": "models/base.yml",
      "quoting": {
        "column": null,
        "database": null,
        "identifier": null,
        "schema": null
      },
      "relation_name": "\"pagila\".\"public\".\"payment_p2020_06\"",
      "resource_type": "source",
      "root_path": "/some-path/sample-dbt",
      "schema": "public",
      "source_description": "base models",
      "source_meta": {},
      "source_name": "pagila",
      "tags": [],
      "unique_id": "source.sample_dbt.pagila.payment_p2020_06",
      "unrendered_config": {}
    }
  }
}
